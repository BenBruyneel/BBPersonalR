% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbAccess.R
\name{db_createColumnDefinitions}
\alias{db_createColumnDefinitions}
\title{helper function for db_createTable(): generates a column definitions list
based on the column types (classes) of the data.frame}
\usage{
db_createColumnDefinitions(
  dataframe,
  dbType = "SQLite",
  dateAsInteger = FALSE,
  preferredText = "LONGTEXT",
  preferredBlob = "LONGBLOB"
)
}
\arguments{
\item{dataframe}{data.frame which is to be written to a database using
eg db_createTable()}

\item{dbType}{currently only SQLite is a valid value}

\item{dateAsInteger}{boolean, if FALSE the type "DATE" is used, otherwise
"INTEGER" is used. This is to circumvent data type
conventions}

\item{preferredText}{character string specifying which text field type is to
be used. Ignored when dbType = "SQLite"}

\item{preferredBlob}{character string specifying which blob field type is to
be used. Ignored when dbType = "SQLite"}
}
\value{
a cahracter list of column names/ column types for use as
        columnDefinitions in db_createTable()
}
\description{
helper function for db_createTable(): generates a column definitions list
based on the column types (classes) of the data.frame
}
\note{
not all data types are in here yet, they will be added when needed

this function is experimental, may change in the future

DATE fields will come back as integer type in case of SQLite, use
 if as.Date(..., origin = "1970-01-01") to transform to proper dates

LOGICAL (BOOLEAN) fields will come back as integer type
 (0 FALSE,1 TRUE)
}
