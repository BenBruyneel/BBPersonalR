% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/regressionTools.R
\name{fitPlot}
\alias{fitPlot}
\title{generates a ggplot object of the fit table}
\usage{
fitPlot(
  fitTable,
  predictorColumn = 1,
  responseColumn = 2,
  weights = NULL,
  fit = fitLM(fitTable, predictorColumn = predictorColumn, responseColumn =
    responseColumn, weights = weights),
  title = "",
  figureNo = 1,
  caption = paste(c("Figure ", figureNo, ": Calibration Curve"), collapse = ""),
  autoScalePredictor = FALSE,
  predictorLimits = c(0, "N/A"),
  predictorLabel = NULL,
  predictorOob = 1,
  autoScaleResponse = FALSE,
  responseLimits = c(0, "N/A"),
  responseLabel = NULL,
  responseOob = 1,
  regressionColor = "red",
  regressionLineType = 1,
  regressionWidth = 1,
  regressionAlpha = 1,
  pointsColor = "Black",
  pointsFill = "black",
  pointsShape = 21,
  pointsSize = 2,
  pointsAlpha = 1,
  showConfidence = TRUE,
  confidenceLevel = 0.95,
  confidenceColor = "green",
  confidenceAlpha = 0.2,
  showPrediction = FALSE,
  predictionLevel = 0.95,
  predictionColor = "blue",
  predictionAlpha = 0.05,
  rotateGraph = FALSE,
  predictorOptions = "1",
  responseOptions = "1"
)
}
\arguments{
\item{fitTable}{data.frame containing the data to be fitted}

\item{predictorColumn}{can be integer (column number) or character
(column name)}

\item{responseColumn}{can be integer (column number) or character
(column name)}

\item{weights}{default = NULL, otherwise must be integer to give weights to
the predictor values (see also function weightsVector) or a numeric
vector with length = number of rows in calibrationTable. Note: if a vector
of weights if provided, the prediction to the minimal/maximal values on the
x- & y-axis is not possible}

\item{fit}{model object (eg coming from lm() or fitLM())}

\item{title}{title for the graph, character vector}

\item{figureNo}{number of the figure, used for the caption ("Figure ..." )}

\item{caption}{caption for the graph, character vector}

\item{autoScalePredictor}{if TRUE then default autoscaling of the y-axis
takes place,most other settings delaing with scaling of the y-axis the are
then ignored}

\item{predictorLimits}{2 element numeric vector with the minimum and maximum value
for the x-axis. If an element is a character vector or something that
cannot be converted to a numeric value, then NA is used which leads to
minimum/maximum value}

\item{predictorLabel}{name of the x-axis, character vector}

\item{predictorOob}{integer vector, indicating how to deal with out of bounds
datapoints. 1 = censor scales::oob_censor is used, 2 = infinite,
scales::oob_squish_infinite is used. Note: x-axis only}

\item{responseLimits}{2 element numeric vector with the minimum and maximum value
for the y-axis. If an element is a character vector or something that
cannot be converted to a numeric value, then NA is used which leads to
minimum/maximum value}

\item{responseLabel}{name of the y-axis, character vector}

\item{regressionColor}{color of the regression line}

\item{regressionLineType}{appearance of the regression line: 0 = blank,
1 = solid, 2 = dashed, 3 = dotted, 4 = dotdash, 5 = longdash, 6 = twodash}

\item{regressionWidth}{width of the regression line (default 1)}

\item{regressionAlpha}{alpha ('seethrough' value) of the regressionline}

\item{pointsColor}{(border) color of the datapoints}

\item{pointsFill}{fill color, note: only some shapes have a fill color}

\item{pointsShape}{shape of the datapoints (default = 21), see vignette
ggplot2::ggplot2-specs}

\item{pointsSize}{size of the datapoints}

\item{pointsAlpha}{alpha ('seethrough' value) of the datapoints}

\item{showConfidence}{defines if confidence level needs to be shown
(usually shown as a shaded area around the line)}

\item{confidenceLevel}{defines the confidence level (range 0-1)}

\item{confidenceColor}{color of the confidence 'area'}

\item{confidenceAlpha}{alpha ('seethrough' value) of the confidence 'area'}

\item{showPrediction}{defines if prediction level needs to be shown
(usually shown as a shaded area around the line)}

\item{predictionLevel}{defines the prediction level (range 0-1)}

\item{predictionColor}{color of the prediction 'area'}

\item{predictionAlpha}{alpha ('seethrough' value) of the prediction 'area'}

\item{rotateGraph}{if TRUE, then x-axis and y-axis are swapped, essentially
resulting in a graph rotated 90 degrees}

\item{predictorOptions}{x-axis options character vector, "1" normal scale,
"2" reversed scale, "3" logarithmic scale (log10)}

\item{responseOptions}{y-axis options character vector, "1" normal scale,
"2" reversed scale,"3" logarithmic scale (log10)}

\item{respomseOob}{integer vector, indicating how to deal with out of bounds
datapoints. 1 = censor scales::oob_censor is used, 2 = infinite,
scales::oob_squish_infinite is used. Note: y-axis only}
}
\value{
ggplot object
}
\description{
generates a ggplot object of the fit table
}
